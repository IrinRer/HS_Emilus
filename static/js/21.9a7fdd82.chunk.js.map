{"version":3,"sources":["views/app-views/customers/listClients/UserView.js","components/shared-components/AvatarStatus/index.js","views/app-views/customers/listClients/index.js"],"names":["UserView","user","visible","close","width","placement","onClose","closable","Flex","alignItems","mobileFlex","className","name","layout","initialValues","username","email","phoneNumber","phone","website","city","address","postcode","zipcode","onFinish","key","message","loading","content","setTimeout","success","duration","onFinishFailed","errorInfo","console","log","xs","sm","md","lg","gutter","ROW_GUTTER","Item","label","rules","required","type","htmlType","AvatarStatus","props","suffix","subTitle","id","onNameClick","onClick","ListClients","users","useSelector","state","dispatch","useDispatch","useState","userProfileVisible","setUserProfileVisible","selectedUser","setSelectedUser","Loading","tableColumns","title","dataIndex","render","_","record","sorter","compare","a","b","toLowerCase","length","elm","icon","EyeOutlined","size","danger","DeleteOutlined","userId","deleteUserAction","bodyStyle","padding","columns","dataSource","rowKey"],"mappings":"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","file":"static/js/21.9a7fdd82.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Form, Button, Input, Row, Col, message, Drawer } from \"antd\";\r\nimport { ROW_GUTTER } from \"constants/ThemeConstant\";\r\nimport Flex from \"components/shared-components/Flex\";\r\n\r\nconst UserView = ({ user, visible, close }) => {\r\n\r\n  const onFinish = () => {\r\n    const key = \"updatable\";\r\n    message.loading({ content: \"Updating...\", key });\r\n    setTimeout(() => {\r\n      message.success({ content: \"Done!\", key, duration: 2 });\r\n\t  close();\r\n    }, 1000);\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  return (\r\n    <Drawer\r\n      width={700}\r\n      placement=\"right\"\r\n      onClose={close}\r\n      closable={false}\r\n      visible={visible}\r\n    >\r\n      <Flex\r\n        alignItems=\"center\"\r\n        mobileFlex={false}\r\n        className=\"text-center text-md-left\"\r\n      ></Flex>\r\n      <div className=\"mt-4\">\r\n        <Form\r\n          name=\"basicInformation\"\r\n          layout=\"vertical\"\r\n          initialValues={{\r\n            name: user.name,\r\n            username: user.username,\r\n            email: user.email,\r\n            phoneNumber: user.phone,\r\n            website: user.website,\r\n            city: user.address.city,\r\n            postcode: user.address.zipcode,\r\n          }}\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n        >\r\n          <Row>\r\n            <Col xs={24} sm={24} md={24} lg={16}>\r\n              <Row gutter={ROW_GUTTER}>\r\n                <Col xs={24} sm={24} md={12}>\r\n                  <Form.Item\r\n                    label=\"Name\"\r\n                    name=\"name\"\r\n                    rules={[\r\n                      {\r\n                        required: true,\r\n                        message: \"Please input your name!\",\r\n                      },\r\n                    ]}\r\n                  >\r\n                    <Input />\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col xs={24} sm={24} md={12}>\r\n                  <Form.Item\r\n                    label=\"Username\"\r\n                    name=\"username\"\r\n                    rules={[\r\n                      {\r\n                        required: true,\r\n                        message: \"Please input your username!\",\r\n                      },\r\n                    ]}\r\n                  >\r\n                    <Input />\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col xs={24} sm={24} md={12}>\r\n                  <Form.Item\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    rules={[\r\n                      {\r\n                        required: true,\r\n                        type: \"email\",\r\n                        message: \"Please enter a valid email!\",\r\n                      },\r\n                    ]}\r\n                  >\r\n                    <Input />\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col xs={24} sm={24} md={12}>\r\n                  <Form.Item label=\"Phone Number\" name=\"phoneNumber\">\r\n                    <Input />\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col xs={24} sm={24} md={12}>\r\n                  <Form.Item label=\"Website\" name=\"website\">\r\n                    <Input />\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col xs={24} sm={24} md={12}>\r\n                  <Form.Item label=\"City\" name=\"city\">\r\n                    <Input />\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col xs={24} sm={24} md={12}>\r\n                  <Form.Item label=\"Post code\" name=\"postcode\">\r\n                    <Input />\r\n                  </Form.Item>\r\n                </Col>\r\n              </Row>\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Save Change\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </div>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default UserView;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AvatarStatus = (props) => {\r\n  const { name, suffix, subTitle, id, onNameClick } = props;\r\n  return (\r\n    <div className=\"avatar-status d-flex align-items-center\">\r\n      <div className=\"ml-2\">\r\n        <div>\r\n          {onNameClick ? (\r\n            <div\r\n              onClick={() => onNameClick({ name, subTitle, id })}\r\n              className=\"avatar-status-name clickable\"\r\n            >\r\n              {name}\r\n            </div>\r\n          ) : (\r\n            <div className=\"avatar-status-name\">{name}</div>\r\n          )}\r\n          <span>{suffix}</span>\r\n        </div>\r\n        <div className=\"text-muted avatar-status-subtitle\">{subTitle}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nAvatarStatus.propTypes = {\r\n  name: PropTypes.string,\r\n  type: PropTypes.string,\r\n  onNameClick: PropTypes.func,\r\n};\r\n\r\nexport default AvatarStatus;\r\n","import React, { useState } from \"react\";\r\nimport { Card, Table, Tooltip, Button } from \"antd\";\r\nimport { EyeOutlined, DeleteOutlined } from \"@ant-design/icons\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport UserView from \"./UserView\";\r\nimport AvatarStatus from \"components/shared-components/AvatarStatus\";\r\nimport { deleteUserAction } from \"redux/actions/Users\";\r\nimport Loading from \"components/shared-components/Loading\";\r\n\r\nexport const ListClients = () => {\r\n  const users = useSelector((state) => state.users.users);\r\n  const loading = useSelector((state) => state.users.loading);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [userProfileVisible, setUserProfileVisible] = useState(false);\r\n  const [selectedUser, setSelectedUser] = useState(null);\r\n\r\n  if (!loading) {\r\n    return <Loading />;\r\n  }\r\n\r\n  const deleteUser = (userId) => {\r\n    dispatch(deleteUserAction(userId));\r\n  };\r\n\r\n  const showUserProfile = (userInfo) => {\r\n    setSelectedUser(userInfo);\r\n    setUserProfileVisible(true);\r\n  };\r\n\r\n  const closeUserProfile = () => {\r\n    setSelectedUser(null);\r\n    setUserProfileVisible(false);\r\n  };\r\n\r\n  const tableColumns = [\r\n    {\r\n      title: \"User\",\r\n      dataIndex: \"name\",\r\n      render: (_, record) => (\r\n        <div className=\"d-flex\">\r\n          <AvatarStatus name={record.name} subTitle={record.email} />\r\n        </div>\r\n      ),\r\n      sorter: {\r\n        compare: (a, b) => {\r\n          a = a.name.toLowerCase();\r\n          b = b.name.toLowerCase();\r\n          return a > b ? -1 : b > a ? 1 : 0;\r\n        },\r\n      },\r\n    },\r\n    {\r\n      title: \"Phone\",\r\n      dataIndex: \"phone\",\r\n      sorter: {\r\n        compare: (a, b) => a.phone.length - b.phone.length,\r\n      },\r\n    },\r\n    {\r\n      title: \"Website\",\r\n      dataIndex: \"website\",\r\n    },\r\n    {\r\n      title: \"Username\",\r\n      dataIndex: \"username\",\r\n    },\r\n    {\r\n      title: \"\",\r\n      dataIndex: \"actions\",\r\n      render: (_, elm) => (\r\n        <div className=\"text-right\">\r\n          <Tooltip title=\"View\">\r\n            <Button\r\n              type=\"primary\"\r\n              className=\"mr-2\"\r\n              icon={<EyeOutlined />}\r\n              onClick={() => {\r\n                showUserProfile(elm);\r\n              }}\r\n              size=\"small\"\r\n            />\r\n          </Tooltip>\r\n          <Tooltip title=\"Delete\">\r\n            <Button\r\n              danger\r\n              icon={<DeleteOutlined />}\r\n              onClick={() => {\r\n                deleteUser(elm.id);\r\n              }}\r\n              size=\"small\"\r\n            />\r\n          </Tooltip>\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n  return (\r\n    <Card bodyStyle={{ padding: \"0px\" }}>\r\n      <Table columns={tableColumns} dataSource={users} rowKey=\"id\" />\r\n      {selectedUser ? (\r\n        <UserView\r\n          user={selectedUser}\r\n          visible={userProfileVisible}\r\n          close={() => {\r\n            closeUserProfile();\r\n          }}\r\n        />\r\n      ) : (\r\n        false\r\n      )}\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ListClients;\r\n"],"sourceRoot":""}